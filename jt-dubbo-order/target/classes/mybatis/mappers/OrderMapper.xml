<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 唯一标识映射文件 -->
<mapper namespace="com.jt.order.mapper.OrderMapper">
	
	<!-- 万能转义表达式  可以转义任意字符 <![CDATA[ XXXXXXXXXXXXX ]]>
	<![CDATA[update  tb_order set status = 6 where created < #{time} and status=1]]>
	-->
	<update id="updateStatusByDate">
		update  tb_order set status = 6 where created &lt; #{time} and status=1 
	</update>
	<select id="findOrderById" resultMap="orderResultMap">
		select * from tb_order where order_id = #{orderId}
		
	</select>
	<!-- 属性分析
			type: 返回的数据类型
			id: 唯一标识resultMap方面被别人调用
			autoMapping="true" 实现自动驼峰映射 user_id 》》 userId  该属性添加肯定没错的
	 -->
	<resultMap type="Order" id="orderResultMap" autoMapping="true">
		<!-- 进行关联封装时 必须先封装主键 -->
		<id column="order_id" property="orderId"></id>
		<!-- 结果集的剩余字段  autoMapping="true" 能自动全部映射 -->
		<!-- 由于需要关联映射给orderShipping赋值，需要一对一封装orderShipping 
		association封装固定搭配javaType
				association 表示一对一封装，表示一个对象，是Order一个属性，为对象进行赋值
				javaType: 表示封装对象的数据类型，与一对一映射标签association是固定搭配
				column: 表示Order对象的主键信息，用来实现关联查询的
		-->
		<association property="orderShipping" javaType="OrderShipping" column="order_id" 
		select="findOrderShipping"></association>
		<!-- 封装OrderItem集合 
			collection封装固定搭配ofType
		-->
		<collection property="orderItems" ofType="OrderItem" column="order_id" 
		select="findOrderItems"></collection>
	</resultMap>
	<!-- 根据orderId实现查询 orderShipping    单表查询可以用：resultMap 也可以用resultType-->
	<select id="findOrderShipping" resultMap="orderShippingRM">
		select * from tb_order_shipping where order_id = #{orderId}
	</select>
	
	<resultMap type="OrderShipping" id="orderShippingRM" autoMapping="true">
		<id column="order_id" property="orderId"></id>
		<!-- 结果集的剩余字段  autoMapping="true" 能自动全部映射 -->
	</resultMap>
	
	<!-- 根据orderId实现查询 orderItem   -->
	<select id="findOrderItems" resultType="OrderItem">
		select * from tb_order_item where order_id = #{orderId}
	</select>
	
	
	
</mapper>




